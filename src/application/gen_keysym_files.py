#!/usr/bin/env python3
# Emperor - an orthodox file manager for the GNOME desktop
# Copyright (C) 2011    Thomas Jollans
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


##
# STEP 1: Find gdk/gdkkeysyms.h
##

import subprocess
gdk_cflags = subprocess.check_output(['pkg-config', 'gdk-3.0', '--cflags']).split()

header = None

for cflag in gdk_cflags:
    if cflag.startswith(b'-I'):
        directory = cflag[2:]
        fname = directory + b'/gdk/gdkkeysyms.h'
        try :
            header = open(fname, 'r')
        except:
            pass
        else:
            break

##
# STEP 2: write out the source files
##

vapifile = open('gdkkeysyms.vapi', 'w')
namefile = open('keynames.c', 'w')

vapifile.write(
''' /* This file was generated by gen_keysym_files.py.
 * Do not edit directly.
 */
namespace Gdk {
    [CCode ( cheader_filename="gdk/gdkkeysyms.h", cprefix="GDK_KEY_", cname = "guint", has_type_id = false )]
    public enum KeySym {
''')

keynames = {}

def introduce_into_dict(d, s, i):
    if s[i:]:
        if s[i] not in d:
            d[s[i]] = {}
        introduce_into_dict (d[s[i]], s, i+1)
    else:
        d['\0'] = s

def add_keyname(n):
    introduce_into_dict (keynames, n, 0)
                

first = True
for input_line in header:
    if input_line.startswith("#define GDK_KEY_"):
        keyname = input_line.split()[1][8:]
        if keyname in '0123456789':
            vala_keyname = '@'+keyname
        else:
            vala_keyname = keyname
        if first:
            vapifile.write('{0}'.format(vala_keyname))
            first = False
        else:
            vapifile.write(',\n{0}'.format(vala_keyname))

        add_keyname (keyname)


vapifile.write('''    }
}
namespace Emperor {
    [CCode ( cheader_filename="keynames.h", lower_case_cprefix="emperor_")]
    public static Gdk.KeySym get_keysym_from_name (string name);
}
''')

namefile.write(
''' /* This file was generated by gen_keysym_files.py.
 * Do not edit directly.
 */
#include <glib.h>
#include <gdk/gdkkeysyms.h>
guint emperor_get_keysym_from_name (const gchar *name)
{
''')

def write_switch (d, i, indent):
    namefile.write (indent+"switch(name[%d]) {\n" % i)
    for c, sub in d.items():
        namefile.write(indent+"case 0x%x:\n" % ord(c))
        if isinstance(sub,str):
            namefile.write(indent+"  return GDK_KEY_%s;\n" % sub)
        else:
            write_switch(sub, i+1, indent+'  ')
    namefile.write(indent+"default:\n"+indent+"  return -1;\n"+indent+"}\n")

write_switch (keynames, 0, '  ')

namefile.write('''
}
''')

vapifile.close()
namefile.close()
header.close()


